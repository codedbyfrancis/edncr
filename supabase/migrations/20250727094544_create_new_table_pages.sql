create type "public"."pages_status" as enum ('editing', 'for_modification', 'for_review', 'approved', 'deleted');

create type "public"."user_status" as enum ('active', 'on_hold', 'banned');

create table "public"."pages" (
    "id" bigint generated by default as identity not null,
    "category" character varying default 'main'::character varying,
    "sub_category" character varying,
    "title" character varying not null,
    "sub_title" character varying,
    "content" text not null,
    "featured_image" character varying,
    "user_id" uuid not null,
    "approved_by_user_id" uuid not null,
    "modified_at" timestamp with time zone,
    "approved_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone default now(),
    "status" pages_status default 'editing'::pages_status
);


alter table "public"."pages" enable row level security;

alter table "public"."profiles" add column "status" user_status not null default 'active'::user_status;

CREATE UNIQUE INDEX pages_pkey ON public.pages USING btree (id);

alter table "public"."pages" add constraint "pages_pkey" PRIMARY KEY using index "pages_pkey";

alter table "public"."pages" add constraint "pages_approved_by_user_id_fkey" FOREIGN KEY (approved_by_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages" validate constraint "pages_approved_by_user_id_fkey";

alter table "public"."pages" add constraint "pages_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages" validate constraint "pages_user_id_fkey";

grant delete on table "public"."pages" to "anon";

grant insert on table "public"."pages" to "anon";

grant references on table "public"."pages" to "anon";

grant select on table "public"."pages" to "anon";

grant trigger on table "public"."pages" to "anon";

grant truncate on table "public"."pages" to "anon";

grant update on table "public"."pages" to "anon";

grant delete on table "public"."pages" to "authenticated";

grant insert on table "public"."pages" to "authenticated";

grant references on table "public"."pages" to "authenticated";

grant select on table "public"."pages" to "authenticated";

grant trigger on table "public"."pages" to "authenticated";

grant truncate on table "public"."pages" to "authenticated";

grant update on table "public"."pages" to "authenticated";

grant delete on table "public"."pages" to "service_role";

grant insert on table "public"."pages" to "service_role";

grant references on table "public"."pages" to "service_role";

grant select on table "public"."pages" to "service_role";

grant trigger on table "public"."pages" to "service_role";

grant truncate on table "public"."pages" to "service_role";

grant update on table "public"."pages" to "service_role";

create policy "Enable insert for users based on user role"
on "public"."pages"
as permissive
for insert
to public
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.user_id = auth.uid()) AND (profiles.role = ANY (ARRAY['contributor'::roles, 'editor'::roles, 'manager'::roles, 'superuser'::roles]))))));


create policy "Enable read access for all users"
on "public"."pages"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on role"
on "public"."pages"
as permissive
for update
to authenticated
using ((user_id = auth.uid()))
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.user_id = auth.uid()) AND (profiles.role = ANY (ARRAY['contributor'::roles, 'editor'::roles, 'manager'::roles, 'superuser'::roles]))))));



