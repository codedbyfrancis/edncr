create type "public"."language" as enum ('en', 'ar', 'nl');

create type "public"."pages_status" as enum ('draft', 'for_review', 'rejected',  'approved', 'deleted');

create type "public"."roles" as enum ('user', 'contributor', 'editor', 'manager', 'superuser');

create type "public"."user_status" as enum ('active', 'on_hold', 'banned');

create table "public"."blogs" (
    "id" bigint generated by default as identity not null,
    "slug" text not null,
    "user_id" uuid,
    "approved_by_user_id" uuid,
    "approved_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone default now(),
    "status" pages_status default 'draft'::pages_status
);


alter table "public"."blogs" enable row level security;

create table "public"."blogs_translations" (
    "id" bigint generated by default as identity not null,
    "blog_id" bigint not null,
    "lang" language not null,
    "category" character varying default 'main'::character varying,
    "sub_category" character varying,
    "title" character varying not null,
    "sub_title" character varying,
    "content" text not null,
    "featured_image" character varying,
    "user_id" uuid,
    "approved_by_user_id" uuid,
    "modified_at" timestamp with time zone,
    "approved_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone default now(),
    "status" pages_status default 'draft'::pages_status
);


alter table "public"."blogs_translations" enable row level security;

create table "public"."pages" (
    "id" bigint generated by default as identity not null,
    "slug" text not null,
    "user_id" uuid,
    "approved_by_user_id" uuid,
    "status" pages_status default 'draft'::pages_status,
    "approved_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone default now()
);


alter table "public"."pages" enable row level security;

create table "public"."pages_translations" (
    "id" bigint generated by default as identity not null,
    "lang" language not null,
    "page_id" bigint not null,
    "category" character varying default 'main'::character varying,
    "sub_category" character varying,
    "title" character varying not null,
    "sub_title" character varying,
    "content" text not null,
    "featured_image" character varying,
    "user_id" uuid,
    "approved_by_user_id" uuid,
    "status" pages_status default 'draft'::pages_status,
    "modified_at" timestamp with time zone,
    "approved_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone default now()
);


alter table "public"."pages_translations" enable row level security;

create table "public"."profiles" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "first_name" character varying,
    "last_name" character varying,
    "email" character varying,
    "phone" character varying,
    "role" roles not null default 'user'::roles,
    "metadata" jsonb,
    "status" user_status not null default 'active'::user_status,
    "modified_at" timestamp with time zone default now(),
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."profiles" enable row level security;

CREATE UNIQUE INDEX blogs_pkey ON public.blogs USING btree (id);

CREATE UNIQUE INDEX blogs_translations_pkey ON public.blogs_translations USING btree (id);

CREATE UNIQUE INDEX pages_content_key ON public.pages USING btree (slug);

CREATE UNIQUE INDEX pages_pkey ON public.pages USING btree (id);

CREATE UNIQUE INDEX pages_translations_pkey ON public.pages_translations USING btree (id);

CREATE UNIQUE INDEX profiles_email_key ON public.profiles USING btree (email);

CREATE UNIQUE INDEX profiles_id_key ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_phone_key ON public.profiles USING btree (phone);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id, user_id);

CREATE UNIQUE INDEX profiles_user_id_key ON public.profiles USING btree (user_id);

alter table "public"."blogs" add constraint "blogs_pkey" PRIMARY KEY using index "blogs_pkey";

alter table "public"."blogs_translations" add constraint "blogs_translations_pkey" PRIMARY KEY using index "blogs_translations_pkey";

alter table "public"."pages" add constraint "pages_pkey" PRIMARY KEY using index "pages_pkey";

alter table "public"."pages_translations" add constraint "pages_translations_pkey" PRIMARY KEY using index "pages_translations_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."blogs" add constraint "blogs_approved_by_user_id_fkey" FOREIGN KEY (approved_by_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."blogs" validate constraint "blogs_approved_by_user_id_fkey";

alter table "public"."blogs" add constraint "blogs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."blogs" validate constraint "blogs_user_id_fkey";

alter table "public"."blogs_translations" add constraint "blogs_translations_approved_by_user_id_fkey" FOREIGN KEY (approved_by_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."blogs_translations" validate constraint "blogs_translations_approved_by_user_id_fkey";

alter table "public"."blogs_translations" add constraint "blogs_translations_blog_id_fkey" FOREIGN KEY (blog_id) REFERENCES blogs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."blogs_translations" validate constraint "blogs_translations_blog_id_fkey";

alter table "public"."blogs_translations" add constraint "blogs_translations_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."blogs_translations" validate constraint "blogs_translations_user_id_fkey";

alter table "public"."pages" add constraint "pages_approved_by_user_id_fkey" FOREIGN KEY (approved_by_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages" validate constraint "pages_approved_by_user_id_fkey";

alter table "public"."pages" add constraint "pages_content_key" UNIQUE using index "pages_content_key";

alter table "public"."pages" add constraint "pages_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages" validate constraint "pages_user_id_fkey";

alter table "public"."pages_translations" add constraint "pages_translations_approved_by_user_id_fkey" FOREIGN KEY (approved_by_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages_translations" validate constraint "pages_translations_approved_by_user_id_fkey";

alter table "public"."pages_translations" add constraint "pages_translations_page_id_fkey" FOREIGN KEY (page_id) REFERENCES pages(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."pages_translations" validate constraint "pages_translations_page_id_fkey";

alter table "public"."pages_translations" add constraint "pages_translations_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."pages_translations" validate constraint "pages_translations_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_email_key" UNIQUE using index "profiles_email_key";

alter table "public"."profiles" add constraint "profiles_id_key" UNIQUE using index "profiles_id_key";

alter table "public"."profiles" add constraint "profiles_phone_key" UNIQUE using index "profiles_phone_key";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_user_id_key" UNIQUE using index "profiles_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$begin
  insert into public.profiles (user_id, status, email, phone, first_name, metadata)
  values (
    new.id,
    'active',
    new.email,
    new.phone,
    new.raw_user_meta_data ->> 'full_name',
    new.raw_user_meta_data
  );
  return new;
end;$function$
;

create trigger on_auth_user_created
after insert on auth.users
for each row
execute procedure public.handle_new_user();


grant delete on table "public"."blogs" to "anon";

grant insert on table "public"."blogs" to "anon";

grant references on table "public"."blogs" to "anon";

grant select on table "public"."blogs" to "anon";

grant trigger on table "public"."blogs" to "anon";

grant truncate on table "public"."blogs" to "anon";

grant update on table "public"."blogs" to "anon";

grant delete on table "public"."blogs" to "authenticated";

grant insert on table "public"."blogs" to "authenticated";

grant references on table "public"."blogs" to "authenticated";

grant select on table "public"."blogs" to "authenticated";

grant trigger on table "public"."blogs" to "authenticated";

grant truncate on table "public"."blogs" to "authenticated";

grant update on table "public"."blogs" to "authenticated";

grant delete on table "public"."blogs" to "service_role";

grant insert on table "public"."blogs" to "service_role";

grant references on table "public"."blogs" to "service_role";

grant select on table "public"."blogs" to "service_role";

grant trigger on table "public"."blogs" to "service_role";

grant truncate on table "public"."blogs" to "service_role";

grant update on table "public"."blogs" to "service_role";

grant delete on table "public"."blogs_translations" to "anon";

grant insert on table "public"."blogs_translations" to "anon";

grant references on table "public"."blogs_translations" to "anon";

grant select on table "public"."blogs_translations" to "anon";

grant trigger on table "public"."blogs_translations" to "anon";

grant truncate on table "public"."blogs_translations" to "anon";

grant update on table "public"."blogs_translations" to "anon";

grant delete on table "public"."blogs_translations" to "authenticated";

grant insert on table "public"."blogs_translations" to "authenticated";

grant references on table "public"."blogs_translations" to "authenticated";

grant select on table "public"."blogs_translations" to "authenticated";

grant trigger on table "public"."blogs_translations" to "authenticated";

grant truncate on table "public"."blogs_translations" to "authenticated";

grant update on table "public"."blogs_translations" to "authenticated";

grant delete on table "public"."blogs_translations" to "service_role";

grant insert on table "public"."blogs_translations" to "service_role";

grant references on table "public"."blogs_translations" to "service_role";

grant select on table "public"."blogs_translations" to "service_role";

grant trigger on table "public"."blogs_translations" to "service_role";

grant truncate on table "public"."blogs_translations" to "service_role";

grant update on table "public"."blogs_translations" to "service_role";

grant delete on table "public"."pages" to "anon";

grant insert on table "public"."pages" to "anon";

grant references on table "public"."pages" to "anon";

grant select on table "public"."pages" to "anon";

grant trigger on table "public"."pages" to "anon";

grant truncate on table "public"."pages" to "anon";

grant update on table "public"."pages" to "anon";

grant delete on table "public"."pages" to "authenticated";

grant insert on table "public"."pages" to "authenticated";

grant references on table "public"."pages" to "authenticated";

grant select on table "public"."pages" to "authenticated";

grant trigger on table "public"."pages" to "authenticated";

grant truncate on table "public"."pages" to "authenticated";

grant update on table "public"."pages" to "authenticated";

grant delete on table "public"."pages" to "service_role";

grant insert on table "public"."pages" to "service_role";

grant references on table "public"."pages" to "service_role";

grant select on table "public"."pages" to "service_role";

grant trigger on table "public"."pages" to "service_role";

grant truncate on table "public"."pages" to "service_role";

grant update on table "public"."pages" to "service_role";

grant delete on table "public"."pages_translations" to "anon";

grant insert on table "public"."pages_translations" to "anon";

grant references on table "public"."pages_translations" to "anon";

grant select on table "public"."pages_translations" to "anon";

grant trigger on table "public"."pages_translations" to "anon";

grant truncate on table "public"."pages_translations" to "anon";

grant update on table "public"."pages_translations" to "anon";

grant delete on table "public"."pages_translations" to "authenticated";

grant insert on table "public"."pages_translations" to "authenticated";

grant references on table "public"."pages_translations" to "authenticated";

grant select on table "public"."pages_translations" to "authenticated";

grant trigger on table "public"."pages_translations" to "authenticated";

grant truncate on table "public"."pages_translations" to "authenticated";

grant update on table "public"."pages_translations" to "authenticated";

grant delete on table "public"."pages_translations" to "service_role";

grant insert on table "public"."pages_translations" to "service_role";

grant references on table "public"."pages_translations" to "service_role";

grant select on table "public"."pages_translations" to "service_role";

grant trigger on table "public"."pages_translations" to "service_role";

grant truncate on table "public"."pages_translations" to "service_role";

grant update on table "public"."pages_translations" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."blogs"
as permissive
for insert
to authenticated
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable read access for all users"
on "public"."blogs"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."blogs"
as permissive
for update
to authenticated
using ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])))
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable insert for authenticated users only"
on "public"."blogs_translations"
as permissive
for insert
to authenticated
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable read access for all users"
on "public"."blogs_translations"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."blogs_translations"
as permissive
for update
to authenticated
using ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])))
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable insert for users based on user role"
on "public"."pages"
as permissive
for insert
to authenticated
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable read access for all users"
on "public"."pages"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on role"
on "public"."pages"
as permissive
for update
to authenticated
using ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])))
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable insert for authenticated users only"
on "public"."pages_translations"
as permissive
for insert
to authenticated
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable read access for all users"
on "public"."pages_translations"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."pages_translations"
as permissive
for update
to public
using ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])))
with check ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.user_id = auth.uid())) = ANY (ARRAY['editor'::roles, 'manager'::roles, 'superuser'::roles])));


create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for users based on user_id"
on "public"."profiles"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable users to view their own data only"
on "public"."profiles"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



